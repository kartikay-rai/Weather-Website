{"ast":null,"code":"const GEO_API_URL = 'https://wft-geo-db.p.rapidapi.com/v1/geo';\nconst WEATHER_API_URL = 'https://api.openweathermap.org/data/2.5';\nconst WEATHER_API_KEY = '44dcd0c54ecce1198ef942f9e391338f';\nconst GEO_API_OPTIONS = {\n  method: 'GET',\n  headers: {\n    'X-RapidAPI-Key': '4f0dcce84bmshac9e329bd55fd14p17ec6fjsnff18c2e61917',\n    'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com'\n  }\n};\nexport async function fetchWeatherData(lat, lon) {\n  try {\n    let [weatherPromise, forcastPromise] = await Promise.all([fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`), fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`)]);\n    const weatherResponse = await weatherPromise.json();\n    const forcastResponse = await forcastPromise.json();\n    return [weatherResponse, forcastResponse];\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport async function fetchCities(input) {\n  try {\n    const response = await fetch(`${GEO_API_URL}/cities?minPopulation=10000&namePrefix=${input}`, GEO_API_OPTIONS);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n    return;\n  }\n}","map":{"version":3,"names":["GEO_API_URL","WEATHER_API_URL","WEATHER_API_KEY","GEO_API_OPTIONS","method","headers","fetchWeatherData","lat","lon","weatherPromise","forcastPromise","Promise","all","fetch","weatherResponse","json","forcastResponse","error","console","log","fetchCities","input","response","data"],"sources":["/home/kartikay/Kaalej 2.0/Weather-Website/src/api/OpenWeatherService.js"],"sourcesContent":["const GEO_API_URL = 'https://wft-geo-db.p.rapidapi.com/v1/geo';\n\nconst WEATHER_API_URL = 'https://api.openweathermap.org/data/2.5';\nconst WEATHER_API_KEY = '44dcd0c54ecce1198ef942f9e391338f';\n\nconst GEO_API_OPTIONS = {\n  method: 'GET',\n  headers: {\n    'X-RapidAPI-Key': '4f0dcce84bmshac9e329bd55fd14p17ec6fjsnff18c2e61917',\n    'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com',\n  },\n};\n\nexport async function fetchWeatherData(lat, lon) {\n  try {\n    let [weatherPromise, forcastPromise] = await Promise.all([\n      fetch(\n        `${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n      ),\n      fetch(\n        `${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n      ),\n    ]);\n\n    const weatherResponse = await weatherPromise.json();\n    const forcastResponse = await forcastPromise.json();\n    return [weatherResponse, forcastResponse];\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchCities(input) {\n  try {\n    const response = await fetch(\n      `${GEO_API_URL}/cities?minPopulation=10000&namePrefix=${input}`,\n      GEO_API_OPTIONS\n    );\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n    return;\n  }\n}\n"],"mappings":"AAAA,MAAMA,WAAW,GAAG,0CAA0C;AAE9D,MAAMC,eAAe,GAAG,yCAAyC;AACjE,MAAMC,eAAe,GAAG,kCAAkC;AAE1D,MAAMC,eAAe,GAAG;EACtBC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE;IACP,gBAAgB,EAAE,oDAAoD;IACtE,iBAAiB,EAAE;EACrB;AACF,CAAC;AAED,OAAO,eAAeC,gBAAgBA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAC/C,IAAI;IACF,IAAI,CAACC,cAAc,EAAEC,cAAc,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACvDC,KAAK,CACH,GAAGZ,eAAe,gBAAgBM,GAAG,QAAQC,GAAG,UAAUN,eAAe,eAC3E,CAAC,EACDW,KAAK,CACH,GAAGZ,eAAe,iBAAiBM,GAAG,QAAQC,GAAG,UAAUN,eAAe,eAC5E,CAAC,CACF,CAAC;IAEF,MAAMY,eAAe,GAAG,MAAML,cAAc,CAACM,IAAI,CAAC,CAAC;IACnD,MAAMC,eAAe,GAAG,MAAMN,cAAc,CAACK,IAAI,CAAC,CAAC;IACnD,OAAO,CAACD,eAAe,EAAEE,eAAe,CAAC;EAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF;AAEA,OAAO,eAAeG,WAAWA,CAACC,KAAK,EAAE;EACvC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAC1B,GAAGb,WAAW,0CAA0CqB,KAAK,EAAE,EAC/DlB,eACF,CAAC;IAED,MAAMoB,IAAI,GAAG,MAAMD,QAAQ,CAACP,IAAI,CAAC,CAAC;IAClC,OAAOQ,IAAI;EACb,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}